// ---------------------------------------------------------------------------------------------------
// <copyright file="Processor.cs" company="Elephant Insurance Services, LLC">
//     Copyright (c) 2015 All Right Reserved
// </copyright>
// <author>Gurpreet Singh</author>
// <date>2015-05-28</date>
// <summary>
//     The Processor class
// </summary>
// ---------------------------------------------------------------------------------------------------

namespace Elephant.Protractor.WindowsApplication.Framework.Processes
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;

    using Elephant.Protractor.WindowsApplication.Framework.ApiHelper;
    using Elephant.Protractor.WindowsApplication.Framework.Emailer;
    using Elephant.Protractor.WindowsApplication.Framework.FileHelper;
    using Elephant.Protractor.WindowsApplication.Framework.Helpers;
    using Elephant.Protractor.WindowsApplication.Resources.ApiModels;
    using Elephant.Protractor.WindowsApplication.Resources.ApiModels.Enum;
    using Elephant.Protractor.WindowsApplication.Resources.ApiModels.Messages;
    using Elephant.Protractor.WindowsApplication.Resources.Constants;
    using Elephant.Protractor.WindowsApplication.Resources.Extensions;
    using Elephant.Protractor.WindowsApplication.Resources.Models;

    /// <summary>
    /// The Processor class
    /// </summary>
    public static class Processor
    {
        /// <summary>
        /// Executes the service.
        /// </summary>
        public static void ExecuteService()
        {
            try
            {
                var resultData = TestDataApi.Post<SearchReportObject, List<ReportData>>(EndPoints.ReportSearch, new SearchReportObject { ExecutionGroup = "03-07-2015-19-40-24-5" });
                Console.WriteLine(resultData);

                var testQueue = TestDataApi.Get<List<TestQueue>>(EndPoints.GetTestQueue);

                if (testQueue.Item == null || testQueue.IsError)
                {
                    return;
                }

                FileGenerator fileGenerator = new FileGenerator(testQueue.Item);
                string directoryName = fileGenerator.GenerateSpecFiles();

                if (!string.IsNullOrWhiteSpace(directoryName))
                {
                    new ProtractorConfigJsBuilder().Create(testQueue.Item[0]);

                    testQueue.Item.ForEach(x => x.Status = 1);

                    var updateResult = TestDataApi.Post(EndPoints.BulkUpdateTestQueue, testQueue.Item);

                    if (updateResult.IsError)
                    {
                        Directory.Delete(directoryName, true);
                    }
                    else
                    {
                        string groupName = testQueue.Item[0].GroupName;

                        TestDataApi.Post(string.Format(EndPoints.SchedulerHistoryStatus, groupName, (int)SchedulerExecutionStatus.InProgress), new SchedulerHistory());

                        ProtractorCommandRunner protractorCommandRunner = new ProtractorCommandRunner();
                        protractorCommandRunner.ExecuteCommand(groupName);

                        TestDataApi.Post(string.Format(EndPoints.SchedulerHistoryStatus, groupName, (int)SchedulerExecutionStatus.Completed), new SchedulerHistory());

                        ProcessEmail(testQueue, groupName);

                        ImageProcessor.ProcessImages(groupName);
                    }
                }
            }
            catch (Exception ex)
            {
                LoggerService.LogException(ex);
            }
        }

        /// <summary>
        /// Processes the email.
        /// </summary>
        /// <param name="testQueue">The test queue.</param>
        /// <param name="groupName">Name of the group.</param>
        private static void ProcessEmail(ResultMessage<List<TestQueue>> testQueue, string groupName)
        {
            var emailStatus = SchedulerHistoryEmailStatus.NotSent;

            if (testQueue != null && testQueue.Item != null && groupName.IsNotBlank())
            {
                var schedulerIds = testQueue.Item.Select(x => x.SchedulerId).Distinct();

                var resultData = TestDataApi.Post<SearchReportObject, List<ReportData>>(EndPoints.ReportSearch, new SearchReportObject { ExecutionGroup = groupName });

                if (resultData == null || resultData.IsError)
                {
                    emailStatus = SchedulerHistoryEmailStatus.SendException;
                }
                else if (resultData.Item != null)
                {
                    var emailProcessor = new EmailProcessor();

                    foreach (var schedulerId in schedulerIds)
                    {
                        if (!schedulerId.HasValue)
                        {
                            continue;
                        }

                        var schedularData = TestDataApi.Get<Scheduler>(string.Format(EndPoints.SchedulerById, schedulerId));

                        if (schedularData != null && !schedularData.IsError && schedularData.Item != null)
                        {
                            var repostData = new ReportResultData(resultData.Item, schedularData.Item, groupName);
                            emailStatus = emailProcessor.EmailReport(repostData);
                        }
                    }
                }
            }

            TestDataApi.Post(string.Format(EndPoints.SchedulerHistoryEmailStatus, groupName, (int)emailStatus), new SchedulerHistory());
        }
    }
}
